From 7715c67cabe13bb15350cba1a78591bbb76c7bac Mon Sep 17 00:00:00 2001
From: ripley <ripley@00db46b3-68df-0310-9c12-caf00c1e9a41>
Date: Thu, 13 May 2021 11:07:56 +0000
Subject: [PATCH] back out c80289 for now, fixes for testing without
 recommended packages

git-svn-id: https://svn.r-project.org/R/trunk@80290 00db46b3-68df-0310-9c12-caf00c1e9a41
---
 src/library/stats/man/nls.Rd      |  16 ++-
 src/library/stats/man/termplot.Rd |   4 +-
 src/library/utils/man/data.Rd     |   4 +-
 tests/Examples/stats-Ex.Rout.save | 179 ++++++++++++++++--------------
 tests/Pkgs/xDir/pkg/DESCRIPTION   |   3 +-
 5 files changed, 110 insertions(+), 96 deletions(-)

diff --git a/src/library/stats/man/nls.Rd b/src/library/stats/man/nls.Rd
index 1767bd267f8..fc788fd4f0d 100644
--- a/src/library/stats/man/nls.Rd
+++ b/src/library/stats/man/nls.Rd
@@ -1,6 +1,6 @@
 % File src/library/stats/man/nls.Rd
 % Part of the R package, https://www.R-project.org
-% Copyright 1995-2020 R Core Team
+% Copyright 1995-2021 R Core Team
 % Distributed under GPL 2 or later
 
 \name{nls}
@@ -295,21 +295,19 @@ try(nlm1 <- update(nlmod, control = list(tol = 1e-7))) # where central diff. wor
 ## contraction on 21 animals.  The observed variables are Strip
 ## (identifier of muscle), Conc (Cacl concentration) and Length
 ## (resulting length of muscle section).
-utils::data(muscle, package = "MASS")
-
+## IGNORE_RDIFF_BEGIN
+if(requireNamespace("MASS", quietly = TRUE)) withAutoprint({
 ## The non linear model considered is
 ##       Length = alpha + beta*exp(-Conc/theta) + error
 ## where theta is constant but alpha and beta may vary with Strip.
 
-with(muscle, table(Strip)) # 2, 3 or 4 obs per strip
+with(MASS::muscle, table(Strip)) # 2, 3 or 4 obs per strip
 
 ## We first use the plinear algorithm to fit an overall model,
 ## ignoring that alpha and beta might vary with Strip.
-musc.1 <- nls(Length ~ cbind(1, exp(-Conc/th)), muscle,
+musc.1 <- nls(Length ~ cbind(1, exp(-Conc/th)), MASS::muscle,
               start = list(th = 1), algorithm = "plinear")
-## IGNORE_RDIFF_BEGIN
 summary(musc.1)
-## IGNORE_RDIFF_END
 
 ## Then we use nls' indexing feature for parameters in non-linear
 ## models to use the conventional algorithm to fit a model in which
@@ -318,10 +316,10 @@ summary(musc.1)
 ## Note that with indexed parameters, the starting values must be
 ## given in a list (with names):
 b <- coef(musc.1)
-musc.2 <- nls(Length ~ a[Strip] + b[Strip]*exp(-Conc/th), muscle,
+musc.2 <- nls(Length ~ a[Strip] + b[Strip]*exp(-Conc/th), MASS::muscle,
               start = list(a = rep(b[2], 21), b = rep(b[3], 21), th = b[1]))
-## IGNORE_RDIFF_BEGIN
 summary(musc.2)
+})
 ## IGNORE_RDIFF_END
 \dontshow{options(od)}
 }
diff --git a/src/library/stats/man/termplot.Rd b/src/library/stats/man/termplot.Rd
index 94fb12778d8..0ce6c003ba1 100644
--- a/src/library/stats/man/termplot.Rd
+++ b/src/library/stats/man/termplot.Rd
@@ -1,6 +1,6 @@
 % File src/library/stats/man/termplot.Rd
 % Part of the R package, https://www.R-project.org
-% Copyright 1995-2015 R Core Team
+% Copyright 1995-2021 R Core Team
 % Distributed under GPL 2 or later
 
 \name{termplot}
@@ -117,7 +117,7 @@ termplot(model, partial.resid = TRUE, se = TRUE, main = TRUE)
 termplot(model, partial.resid = TRUE, smooth = panel.smooth, span.smth = 1/4)
 if(!had.splines && rs) detach("package:splines")
 
-\donttest{## requires recommended package MASS
+if(requireNamespace("MASS", quietly = TRUE)) {
 hills.lm <- lm(log(time) ~ log(climb)+log(dist), data = MASS::hills)
 termplot(hills.lm, partial.resid = TRUE, smooth = panel.smooth,
         terms = "log(dist)", main = "Original")
diff --git a/src/library/utils/man/data.Rd b/src/library/utils/man/data.Rd
index 20ee203678b..b4120622251 100644
--- a/src/library/utils/man/data.Rd
+++ b/src/library/utils/man/data.Rd
@@ -1,6 +1,6 @@
 % File src/library/utils/man/data.Rd
 % Part of the R package, https://www.R-project.org
-% Copyright 1995-2020 R Core Team
+% Copyright 1995-2021 R Core Team
 % Distributed under GPL 2 or later
 
 \name{data}
@@ -182,7 +182,7 @@ data(\dots, list = character(), package = NULL, lib.loc = NULL,
 \examples{
 require(utils)
 data()                         # list all available data sets
-try(data(package = "rpart") )  # list the data sets in the rpart package
+try(data(package = "rpart"), silent = TRUE) # list the data sets in the rpart package
 data(USArrests, "VADeaths")    # load the data sets 'USArrests' and 'VADeaths'
 \dontrun{## Alternatively
 ds <- c("USArrests", "VADeaths"); data(list = ds)}
diff --git a/tests/Examples/stats-Ex.Rout.save b/tests/Examples/stats-Ex.Rout.save
index 8cea9c20c66..b97169b2c23 100644
--- a/tests/Examples/stats-Ex.Rout.save
+++ b/tests/Examples/stats-Ex.Rout.save
@@ -1,7 +1,7 @@
 
-R Under development (unstable) (2021-04-16 r80178) -- "Unsuffered Consequences"
+R Under development (unstable) (2021-05-11 r80283) -- "Unsuffered Consequences"
 Copyright (C) 2021 The R Foundation for Statistical Computing
-Platform: x86_64-pc-linux-gnu (64-bit)
+Platform: x86_64-apple-darwin20.3.0 (64-bit)
 
 R is free software and comes with ABSOLUTELY NO WARRANTY.
 You are welcome to redistribute it under certain conditions.
@@ -1259,15 +1259,15 @@ Residual standard error: 0.04103 on 7 degrees of freedom
 +             trace=TRUE, control = list(maxiter = 10)) )
 0.01722077  (5.34e+02): par = (0.6168807 -1.783839 2.050204 0.2004597)
 3.308944e-06 (1.13e+04): par = (0.5798674 -1.784335 2.028943 0.1920502)
-2.571095e-11 (7.68e+06): par = (0.5793882 -1.78778 2.029276 0.1915479)
-1.619248e-23 (5.90e+03): par = (0.5793887 -1.787785 2.029277 0.1915474)
-1.243570e-28 (8.88e+00): par = (0.5793887 -1.787785 2.029277 0.1915474)
-2.599121e-29 (1.38e+01): par = (0.5793887 -1.787785 2.029277 0.1915474)
-1.292713e-29 (1.71e+00): par = (0.5793887 -1.787785 2.029277 0.1915474)
-1.292713e-29 (1.71e+00): par = (0.5793887 -1.787785 2.029277 0.1915474)
-1.292713e-29 (1.71e+00): par = (0.5793887 -1.787785 2.029277 0.1915474)
-1.292713e-29 (1.71e+00): par = (0.5793887 -1.787785 2.029277 0.1915474)
-1.292713e-29 (1.71e+00): par = (0.5793887 -1.787785 2.029277 0.1915474)
+2.571094e-11 (7.68e+06): par = (0.5793882 -1.78778 2.029276 0.1915479)
+1.653591e-23 (3.46e+03): par = (0.5793887 -1.787785 2.029277 0.1915474)
+5.470789e-29 (1.35e+01): par = (0.5793887 -1.787785 2.029277 0.1915474)
+1.144664e-29 (1.66e+00): par = (0.5793887 -1.787785 2.029277 0.1915474)
+1.123941e-29 (1.43e+00): par = (0.5793887 -1.787785 2.029277 0.1915474)
+1.123941e-29 (1.43e+00): par = (0.5793887 -1.787785 2.029277 0.1915474)
+1.123941e-29 (1.43e+00): par = (0.5793887 -1.787785 2.029277 0.1915474)
+1.123941e-29 (1.43e+00): par = (0.5793887 -1.787785 2.029277 0.1915474)
+1.123941e-29 (1.43e+00): par = (0.5793887 -1.787785 2.029277 0.1915474)
 Error in nls(y ~ cbind(exp(-exp(lrc1) * x), exp(-exp(lrc2) * x)), data = xy,  : 
   number of iterations exceeded maximum of 10
 > ## End(Don't show)
@@ -1279,11 +1279,11 @@ Error in nls(y ~ cbind(exp(-exp(lrc1) * x), exp(-exp(lrc2) * x)), data = xy,  :
 3.308942e-06  (9.08e-04): par = (0.5798674 -1.784335 2.028943 0.1920502)
   It.   2, fac=           1, eval (no.,total): ( 1,  2): new dev = 2.57108e-11
 2.571082e-11  (2.53e-06): par = (0.5793882 -1.78778 2.029276 0.1915479)
-  It.   3, fac=           1, eval (no.,total): ( 1,  3): new dev = 1.66996e-23
-1.669964e-23  (2.04e-12): par = (0.5793887 -1.787785 2.029277 0.1915474)
+  It.   3, fac=           1, eval (no.,total): ( 1,  3): new dev = 1.66997e-23
+1.669968e-23  (2.04e-12): par = (0.5793887 -1.787785 2.029277 0.1915474)
 1.671287e-23  (1.67e-13): par = (2.029277 0.5793887 0.1915474 -1.787785)
 > all.equal(coef(fm1), coef(fmX1), tolerance=0) # ... rel.diff.: 1.57e-6
-[1] "Mean relative difference: 1.574124e-06"
+[1] "Mean relative difference: 1.574125e-06"
 > all.equal(coef(fm1), coef(fmX),  tolerance=0) # ... rel.diff.: 1.03e-12
 [1] "Mean relative difference: 1.032014e-12"
 > ## IGNORE_RDIFF_END
@@ -3994,7 +3994,7 @@ sigma^2 estimated as 0.4566:  log likelihood = -101.2,  aic = 212.4
 > 
 > asOneSidedFormula("age")
 ~age
-<environment: 0x74b45f8>
+<environment: 0x7fe62afea850>
 > asOneSidedFormula(~ age)
 ~age
 > 
@@ -5031,7 +5031,7 @@ function (V)
     r[cbind(1L:p, 1L:p)] <- 1
     r
 }
-<bytecode: 0x393e6d0>
+<bytecode: 0x7fe6290c0f78>
 <environment: namespace:stats>
 > stopifnot(all.equal(Cl, cov2cor(cov(longley))),
 +           all.equal(cor(longley, method = "kendall"),
@@ -7655,7 +7655,7 @@ attr(,".Environment")
 > environment(as.formula("y ~ x"))
 <environment: R_GlobalEnv>
 > environment(as.formula("y ~ x", env = new.env()))
-<environment: 0x4aee280>
+<environment: 0x7fe6272ea7e0>
 > 
 > 
 > ## Create a formula for a model with a large number of variables:
@@ -11182,24 +11182,39 @@ Nonlinear regression model
 > ## contraction on 21 animals.  The observed variables are Strip
 > ## (identifier of muscle), Conc (Cacl concentration) and Length
 > ## (resulting length of muscle section).
-> utils::data(muscle, package = "MASS")
-> 
-> ## The non linear model considered is
-> ##       Length = alpha + beta*exp(-Conc/theta) + error
-> ## where theta is constant but alpha and beta may vary with Strip.
-> 
-> with(muscle, table(Strip)) # 2, 3 or 4 obs per strip
+> ## IGNORE_RDIFF_BEGIN
+> if(requireNamespace("MASS", quietly = TRUE)) withAutoprint({
++ ## The non linear model considered is
++ ##       Length = alpha + beta*exp(-Conc/theta) + error
++ ## where theta is constant but alpha and beta may vary with Strip.
++ 
++ with(MASS::muscle, table(Strip)) # 2, 3 or 4 obs per strip
++ 
++ ## We first use the plinear algorithm to fit an overall model,
++ ## ignoring that alpha and beta might vary with Strip.
++ musc.1 <- nls(Length ~ cbind(1, exp(-Conc/th)), MASS::muscle,
++               start = list(th = 1), algorithm = "plinear")
++ summary(musc.1)
++ 
++ ## Then we use nls' indexing feature for parameters in non-linear
++ ## models to use the conventional algorithm to fit a model in which
++ ## alpha and beta vary with Strip.  The starting values are provided
++ ## by the previously fitted model.
++ ## Note that with indexed parameters, the starting values must be
++ ## given in a list (with names):
++ b <- coef(musc.1)
++ musc.2 <- nls(Length ~ a[Strip] + b[Strip]*exp(-Conc/th), MASS::muscle,
++               start = list(a = rep(b[2], 21), b = rep(b[3], 21), th = b[1]))
++ summary(musc.2)
++ })
+> with(MASS::muscle, table(Strip))
 Strip
 S01 S02 S03 S04 S05 S06 S07 S08 S09 S10 S11 S12 S13 S14 S15 S16 S17 S18 S19 S20 
   4   4   4   3   3   3   2   2   2   2   3   2   2   2   2   4   4   3   3   3 
 S21 
   3 
-> 
-> ## We first use the plinear algorithm to fit an overall model,
-> ## ignoring that alpha and beta might vary with Strip.
-> musc.1 <- nls(Length ~ cbind(1, exp(-Conc/th)), muscle,
-+               start = list(th = 1), algorithm = "plinear")
-> ## IGNORE_RDIFF_BEGIN
+> musc.1 <- nls(Length ~ cbind(1, exp(-Conc/th)), MASS::muscle, start = list(th = 1), 
++     algorithm = "plinear")
 > summary(musc.1)
 
 Formula: Length ~ cbind(1, exp(-Conc/th))
@@ -11214,18 +11229,9 @@ Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’
 
 Residual standard error: 4.666216 on 57 degrees of freedom
 
-> ## IGNORE_RDIFF_END
-> 
-> ## Then we use nls' indexing feature for parameters in non-linear
-> ## models to use the conventional algorithm to fit a model in which
-> ## alpha and beta vary with Strip.  The starting values are provided
-> ## by the previously fitted model.
-> ## Note that with indexed parameters, the starting values must be
-> ## given in a list (with names):
 > b <- coef(musc.1)
-> musc.2 <- nls(Length ~ a[Strip] + b[Strip]*exp(-Conc/th), muscle,
-+               start = list(a = rep(b[2], 21), b = rep(b[3], 21), th = b[1]))
-> ## IGNORE_RDIFF_BEGIN
+> musc.2 <- nls(Length ~ a[Strip] + b[Strip] * exp(-Conc/th), MASS::muscle, 
++     start = list(a = rep(b[2], 21), b = rep(b[3], 21), th = b[1]))
 > summary(musc.2)
 
 Formula: Length ~ a[Strip] + b[Strip] * exp(-Conc/th)
@@ -11234,46 +11240,46 @@ Parameters:
        Estimate  Std. Error   t value   Pr(>|t|)    
 a1   23.4540819   0.7962295  29.45643 4.9571e-16 ***
 a2   28.3020428   0.7927066  35.70305 < 2.22e-16 ***
-a3   30.8007135   1.7156438  17.95286 1.7342e-12 ***
-a4   25.9211323   3.0158262   8.59504 1.3559e-07 ***
-a5   23.2007530   2.8912033   8.02460 3.5004e-07 ***
-a6   20.1200085   2.4354351   8.26136 2.3496e-07 ***
-a7   33.5953318   1.6815460  19.97884 3.0449e-13 ***
-a8   39.0526855   3.7532604  10.40500 8.6252e-09 ***
-a9   32.1369315   3.3175349   9.68699 2.4626e-08 ***
-a10  40.0052055   3.3358051  11.99267 1.0157e-09 ***
-a11  36.1904288   3.1094720  11.63877 1.6038e-09 ***
-a12  36.9108971   1.8390047  20.07113 2.8240e-13 ***
-a13  30.6346316   1.7004083  18.01604 1.6383e-12 ***
-a14  34.3118441   3.4951420   9.81701 2.0282e-08 ***
-a15  38.3952357   3.3749308  11.37660 2.2657e-09 ***
+a3   30.8007137   1.7156438  17.95286 1.7342e-12 ***
+a4   25.9211326   3.0158262   8.59504 1.3559e-07 ***
+a5   23.2007532   2.8912033   8.02460 3.5004e-07 ***
+a6   20.1200086   2.4354351   8.26136 2.3496e-07 ***
+a7   33.5953319   1.6815460  19.97884 3.0449e-13 ***
+a8   39.0526859   3.7532605  10.40500 8.6252e-09 ***
+a9   32.1369318   3.3175349   9.68699 2.4626e-08 ***
+a10  40.0052058   3.3358052  11.99267 1.0157e-09 ***
+a11  36.1904291   3.1094720  11.63877 1.6038e-09 ***
+a12  36.9108972   1.8390047  20.07113 2.8240e-13 ***
+a13  30.6346317   1.7004083  18.01604 1.6383e-12 ***
+a14  34.3118443   3.4951421   9.81701 2.0282e-08 ***
+a15  38.3952360   3.3749309  11.37660 2.2657e-09 ***
 a16  31.2258023   0.8856740  35.25654 < 2.22e-16 ***
 a17  31.2302543   0.8214463  38.01862 < 2.22e-16 ***
-a18  19.9976663   1.0108248  19.78351 3.5750e-13 ***
+a18  19.9976663   1.0108247  19.78351 3.5750e-13 ***
 a19  37.0953309   1.0705800  34.64975 < 2.22e-16 ***
-a20  32.5941641   1.1212451  29.06962 6.1805e-16 ***
-a21  30.3756809   1.0569695  28.73846 7.4819e-16 ***
-b1  -27.3003577   6.8732042  -3.97200 0.00098521 ***
-b2  -26.2701728   6.7536700  -3.88976 0.00117756 ** 
+a20  32.5941641   1.1212451  29.06961 6.1805e-16 ***
+a21  30.3756810   1.0569695  28.73846 7.4819e-16 ***
+b1  -27.3003572   6.8732043  -3.97200 0.00098521 ***
+b2  -26.2701724   6.7536700  -3.88976 0.00117756 ** 
 b3  -30.9010573   2.2700237 -13.61266 1.4292e-10 ***
-b4  -32.2383591   3.8100408  -8.46142 1.6870e-07 ***
-b5  -29.9405722   3.7727989  -7.93590 4.0717e-07 ***
-b6  -20.6218720   3.6472872  -5.65403 2.8577e-05 ***
-b7  -19.6245933   8.0847806  -2.42735 0.02661027 *  
-b8  -45.7798845   4.1131227 -11.13020 3.1530e-09 ***
+b4  -32.2383592   3.8100407  -8.46142 1.6870e-07 ***
+b5  -29.9405723   3.7727989  -7.93590 4.0717e-07 ***
+b6  -20.6218721   3.6472871  -5.65403 2.8577e-05 ***
+b7  -19.6245930   8.0847809  -2.42735 0.02661028 *  
+b8  -45.7798847   4.1131227 -11.13020 3.1530e-09 ***
 b9  -31.3446373   6.3522188  -4.93444 0.00012572 ***
-b10 -38.5987261   3.9554994  -9.75824 2.2137e-08 ***
-b11 -33.9210725   3.8388091  -8.83635 9.1889e-08 ***
-b12 -38.2679569   8.9920330  -4.25576 0.00053345 ***
-b13 -22.5682822   8.1943002  -2.75414 0.01354976 *  
+b10 -38.5987263   3.9554994  -9.75824 2.2137e-08 ***
+b11 -33.9210727   3.8388091  -8.83635 9.1889e-08 ***
+b12 -38.2679563   8.9920328  -4.25576 0.00053345 ***
+b13 -22.5682819   8.1942996  -2.75414 0.01354976 *  
 b14 -36.1668892   6.3576226  -5.68874 2.6648e-05 ***
-b15 -32.9520546   6.3539346  -5.18609 7.4378e-05 ***
-b16 -47.2068080   9.5402928  -4.94815 0.00012215 ***
-b17 -33.8745814   7.6883885  -4.40594 0.00038623 ***
-b18 -15.8962439   6.2222341  -2.55475 0.02050841 *  
-b19 -28.9689854   7.2352656  -4.00386 0.00091949 ***
-b20 -36.9171074   8.0325132  -4.59596 0.00025726 ***
-b21 -26.5075443   7.0124928  -3.78005 0.00149420 ** 
+b15 -32.9520546   6.3539349  -5.18609 7.4378e-05 ***
+b16 -47.2068072   9.5402923  -4.94815 0.00012215 ***
+b17 -33.8745805   7.6883883  -4.40594 0.00038623 ***
+b18 -15.8962437   6.2222338  -2.55475 0.02050841 *  
+b19 -28.9689847   7.2352655  -4.00386 0.00091949 ***
+b20 -36.9171066   8.0325131  -4.59596 0.00025726 ***
+b21 -26.5075437   7.0124926  -3.78005 0.00149420 ** 
 th    0.7969074   0.1265653   6.29641 8.0431e-06 ***
 ---
 Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
@@ -12459,14 +12465,14 @@ attr(,"class")
 $linkfun
 function (mu) 
 mu^lambda
-<bytecode: 0x41176b0>
-<environment: 0x43988e8>
+<bytecode: 0x7fe62bca0318>
+<environment: 0x7fe62bca9848>
 
 $linkinv
 function (eta) 
 pmax(eta^(1/lambda), .Machine$double.eps)
-<bytecode: 0x4117560>
-<environment: 0x43988e8>
+<bytecode: 0x7fe62bca01c8>
+<environment: 0x7fe62bca9848>
 
 > 
 > 
@@ -16738,8 +16744,8 @@ Step function with continuity 'f'= 0.2 ,  3 knots at
 > unclass(sfun0)
 function (v) 
 .approxfun(x, y, v, method, yleft, yright, f, na.rm)
-<bytecode: 0x41c2fd8>
-<environment: 0x2f0ce60>
+<bytecode: 0x7fe62b0db4b8>
+<environment: 0x7fe62d6d16d8>
 attr(,"call")
 stepfun(1:3, y0, f = 0)
 > ls(envir = environment(sfun0))
@@ -17530,6 +17536,15 @@ Loading required package: splines
 > termplot(model, partial.resid = TRUE, smooth = panel.smooth, span.smth = 1/4)
 > if(!had.splines && rs) detach("package:splines")
 > 
+> if(requireNamespace("MASS", quietly = TRUE)) {
++ hills.lm <- lm(log(time) ~ log(climb)+log(dist), data = MASS::hills)
++ termplot(hills.lm, partial.resid = TRUE, smooth = panel.smooth,
++         terms = "log(dist)", main = "Original")
++ termplot(hills.lm, transform.x = TRUE,
++          partial.resid = TRUE, smooth = panel.smooth,
++ 	 terms = "log(dist)", main = "Transformed")
++ 
++ }
 > 
 > 
 > graphics::par(get("par.postscript", pos = 'CheckExEnv'))
@@ -19166,7 +19181,7 @@ Number of Fisher Scoring iterations: 6
 > cleanEx()
 > options(digits = 7L)
 > base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
-Time elapsed:  7.467 0.234 7.739 0 0 
+Time elapsed:  5.861 0.634 6.603 0 0 
 > grDevices::dev.off()
 null device 
           1 
