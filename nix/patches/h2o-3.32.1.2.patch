diff --git a/R/connection.R b/R/connection.R
index 4308a6b..3d6a9a5 100755
--- a/R/connection.R
+++ b/R/connection.R
@@ -816,47 +816,48 @@ h2o.resume <- function(recovery_dir=NULL) {
 
   dest_file <- file.path(dest_folder, "h2o.jar")
 
-  # Download if h2o.jar doesn't already exist or user specifies force overwrite
-  if (nzchar(own_jar) && is_url(own_jar)) {
-    h2o_url <- own_jar # md5 must have same file name and .md5 suffix
-    md5_url <- paste(own_jar, ".md5", sep = "")
-  } else {
-    base_url <- paste("s3.amazonaws.com/h2o-release/h2o", branch, version, "Rjar", sep = "/")
-    h2o_url <- paste("https:/", base_url, "h2o.jar", sep = "/")
-    # Get MD5 checksum
-    md5_url <- paste("https:/", base_url, "h2o.jar.md5", sep = "/")
-  }
-  # ttt <- getURLContent(md5_url, binary = FALSE)
-  # tcon <- textConnection(ttt)
-  # md5_check <- readLines(tcon, n = 1)
-  # close(tcon)
-  md5_file <- tempfile(fileext = ".md5")
-  download.file(md5_url, destfile = md5_file, mode = "w", cacheOK = FALSE, quiet = TRUE)
-  md5_check <- readLines(md5_file, n = 1L)
-  if (nchar(md5_check) != 32) stop("md5 malformed, must be 32 characters (see ", md5_url, ")")
-  unlink(md5_file)
-
-  # Save to temporary file first to protect against incomplete downloads
-  temp_file <- paste(dest_file, "tmp", sep = ".")
-  cat("Performing one-time download of h2o.jar from\n")
-  cat("    ", h2o_url, "\n")
-  cat("(This could take a few minutes, please be patient...)\n")
-  download.file(url = h2o_url, destfile = temp_file, mode = "wb", cacheOK = FALSE, quiet = TRUE)
-
-  # Apply sanity checks
-  if(!file.exists(temp_file))
-    stop("Error: Transfer failed. Please download ", h2o_url, " and place h2o.jar in ", dest_folder)
-
-  md5_temp_file = md5sum(temp_file)
-  md5_temp_file_as_char = as.character(md5_temp_file)
-  if(md5_temp_file_as_char != md5_check) {
-    cat("Error: Expected MD5: ", md5_check, "\n")
-    cat("Error: Actual MD5  : ", md5_temp_file_as_char, "\n")
-    stop("Error: MD5 checksum of ", temp_file, " does not match ", md5_check)
-  }
-
-  # Move good file into final position
-  file.rename(temp_file, dest_file)
+  # # Download if h2o.jar doesn't already exist or user specifies force overwrite
+  # if (nzchar(own_jar) && is_url(own_jar)) {
+  #   h2o_url <- own_jar # md5 must have same file name and .md5 suffix
+  #   md5_url <- paste(own_jar, ".md5", sep = "")
+  # } else {
+  #   base_url <- paste("s3.amazonaws.com/h2o-release/h2o", branch, version, "Rjar", sep = "/")
+  #   h2o_url <- paste("https:/", base_url, "h2o.jar", sep = "/")
+  #   # Get MD5 checksum
+  #   md5_url <- paste("https:/", base_url, "h2o.jar.md5", sep = "/")
+  # }
+  # # ttt <- getURLContent(md5_url, binary = FALSE)
+  # # tcon <- textConnection(ttt)
+  # # md5_check <- readLines(tcon, n = 1)
+  # # close(tcon)
+  # md5_file <- tempfile(fileext = ".md5")
+  # download.file(md5_url, destfile = md5_file, mode = "w", cacheOK = FALSE, quiet = TRUE)
+  # md5_check <- readLines(md5_file, n = 1L)
+  # if (nchar(md5_check) != 32) stop("md5 malformed, must be 32 characters (see ", md5_url, ")")
+  # unlink(md5_file)
+
+  # # Save to temporary file first to protect against incomplete downloads
+  # temp_file <- paste(dest_file, "tmp", sep = ".")
+  # cat("Performing one-time download of h2o.jar from\n")
+  # cat("    ", h2o_url, "\n")
+  # cat("(This could take a few minutes, please be patient...)\n")
+  # download.file(url = h2o_url, destfile = temp_file, mode = "wb", cacheOK = FALSE, quiet = TRUE)
+
+  # # Apply sanity checks
+  # if(!file.exists(temp_file))
+  #   stop("Error: Transfer failed. Please download ", h2o_url, " and place h2o.jar in ", dest_folder)
+
+  # md5_temp_file = md5sum(temp_file)
+  # md5_temp_file_as_char = as.character(md5_temp_file)
+  # if(md5_temp_file_as_char != md5_check) {
+  #   cat("Error: Expected MD5: ", md5_check, "\n")
+  #   cat("Error: Actual MD5  : ", md5_temp_file_as_char, "\n")
+  #   stop("Error: MD5 checksum of ", temp_file, " does not match ", md5_check)
+  # }
+
+  # # Move good file into final position
+  # file.rename(temp_file, dest_file)
+  file.copy(Sys.getenv("JARSOURCE"), dest_file)
   return(dest_file[file.exists(dest_file)])
 }
 
